
#=================================================================================================================================
# $ gmic -m custom.gmic -generate_CLUT keypoints.png,uniformSampling,keypoint_influence
generate_CLUT :
v + 
cube_resolution_idx=64
cube_resolution1={$cube_resolution_idx-1} 
$cube_resolution_idx,$cube_resolution_idx,$cube_resolution_idx,4 

uniformSampling=$2 # choice{0,"None","8 Keypoints (RGB Corners)","27 Keypoints","64 Keypoints","125 Keypoints","216 Keypoints","343 Keypoints"},
if $uniformSampling # Lock uniform sampling
  uniform_distribution {(1+$uniformSampling)^3},3 
  repeat 
  w point.. {round($cube_resolution1*I[$>])},1,{255*I[$>]},1 
  done 
  rm.
fi

-input $1 # Add user-defined color correspondences
s. x 
-rotate[-1,-2] -90
nb_keypoints={w} 
repeat $nb_keypoints
  mode=2 # choice{"ignore","lock", "replace"} TODO: extend the script to take "mode" from the 3th column of the user-defined color correspondences img 
  if $mode # if not ignore (lock or replace)
    tRGB=[{I[$>]}] #TODO: try I(#-1)[$>]
    echo {$tRGB}
    mv[-1] 0
    sRGB=[{I[$>]}]
    echo {$sRGB}
    xyz={round(($cube_resolution1/255)*$sRGB)}

    if $mode==2 pixel_RGB=$tRGB else pixel_RGB=$sRGB fi
     
    mv[-1] 0
    point. $xyz,1,{$pixel_RGB},1 
    mv[-1] 0
    
  fi
done

rm[-2,-1]
keypoint_influence=$3
s c,-3

# create a weighting map image and move it to [0]
if $keypoint_influence<100 # Need to compute a weighting map.
  +distance. 1
  if $keypoint_influence ^. {1/(0.05+4*$keypoint_influence%)} else f. 0 fi
  n. 0,1 nm. influence mv. -3
fi

==. 0 # generate the mask (all pixels so no mask!)
inpaint_pde.. .,100%,1,20 
rm. # remove the mask

if $keypoint_influence<100 # using "if {$influence}" instead is buggy!
  100%,100%,100%,3,[x,y,z] n. 0,255
  j. ..,0,0,0,0,1,...
  -d
  rm[-3,-2]
fi

c. 0,255 

# save it as .cube
output_cube[-1] lut_uniformSampling{$uniformSampling}_keypoint_influence$keypoint_influence.cube

# Apply CLUT
-input $1
s. x
map_clut.. [0] # w/o spatial regularization
-d v - # if all went well, then last 2 images should be almost identical!

rm[-2,-1]
#convert to Haldclut png    
-r 64,64,64,3,3 -r 512,512,1,3,-1 -o lut_uniformSampling{$uniformSampling}_keypoint_influence$keypoint_influence.png

#visualize the cube (Get 3D color distribution of the LUT)
distribution3d colorcube3d primitives3d 1 add3d

#=================================================================================================================================
# $ gmic -m custom.gmic -generate_CLUT_beforeAfter src.tif,dst.tif,out_folder,clut_name,keypoints_influence
# TODO: keypoints_influence is playing a major role and needs to be investigated further
# e.g. gmic -m ../../custom.gmic clut_from_ab fromRawCon_off8bit_beforeCA_3_color_corrected_Humphrey.tif,Humphrey_reference_fromRawCon_off8bit_beforeCA_+3.tif,./,test.png,100

clut_from_ab :
v + 
-input $1 if $!==2 rm. fi
-input $2 if $!==3 rm. fi

#-fx_clut_from_ab 2,4,$3,$4,$5
cube_resolution_idx=4 #choice{4,16,25,36,49,64,81,100,121,144,169,225,256}
i[0] {a=64;[a,a,a]},4 #Input black image at position 0 (1 image 64x64x64x4).
f[1] ">I(#0,round(I(#2)*(w#0-1)/255))+=[R,G,B,1]; I" #Fill image [1] with expression '>I(#0,round(I(#2)*(w#0-1)/255))+=[R,G,B,1]; I'.
l[0]
  s c,-3
  +max. 1
  /[-3,-1] # Divide images [0,2] (will rm img 2)
  ==. 0 #Compute boolean equality between image [1] and 0 (put the result in img 1). This is the mask for inpainting
  inpaint_pde.. .,75%,1 
  distance. 0 #Compute distance map to isovalue 0 in image [1], with euclidean metric (put the result in img 1).
  *. {-1/(1+$5)} # Multiply image [1] by {-1/(1+$5)}. Influence of Color Samples applied here ($5) 
  exp. #Compute pointwise exponential of image [1].
  f.. "f = i(#-1); f*I + (1-f)*[x,y,z]*255/(w-1)" #Fill image [0] with expression 'f = i(#-1); f*I + (1-f)*[x,y,z]*255/(w-1)'
  rm.
  S={arg(1+$cube_resolution_idx,16,25,36,49,64,81,100,121,144,169,225,256)} if $S!=w r. $S,$S,$S,3,3 fi
endl

is_png={str=lowercase(['"$4"']);find(str,'.png')==size(str)-4}
is_cube={str=lowercase(['"$4"']);find(str,'.cube')==size(str)-5}
if !$is_png" && "!$is_cube $!is_ciube error "Filename extension must be '.cube' or '.png'." fi
if $is_png r[0] {0,r=round(whd^0.5);[r,r]},1,3,-1 o[0] "$3/$4"
else
  if {0,w>32} r3dx[0] 32 fi
  output_cube[0] "$3/$4"
fi
rm[0]
  
-input $3/$4 mv[-1] 0
map_clut[-1] [0] # Apply CLUT
-d v - # if all went well, then last 2 images should be almost identical!
rm[^0]
distribution3d colorcube3d primitives3d 1 add3d
v -